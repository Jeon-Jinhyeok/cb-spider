// Cloud Info Manager's Rest Runtime of CB-Spider.
// The CB-Spider is a sub-Framework of the Cloud-Barista Multi-Cloud Project.
// The CB-Spider Mission is to connect all the clouds with a single interface.
//
//      * Cloud-Barista: https://github.com/cloud-barista
//
// by CB-Spider Team, 2019.09.

package main

import (
	"fmt"
	dim "github.com/cloud-barista/cb-spider/cloud-info-manager/driver-info-manager"
	cim "github.com/cloud-barista/cb-spider/cloud-info-manager/credential-info-manager"
	"strconv"

	//cres "github.com/cloud-barista/cb-spider/cloud-control-manager/cloud-driver/interfaces/resources"
/*

	ccim "github.com/cloud-barista/cb-spider/cloud-info-manager/connection-config-info-manager"
	im "github.com/cloud-barista/cb-spider/cloud-info-manager"
	rim "github.com/cloud-barista/cb-spider/cloud-info-manager/region-info-manager"
*/
	"net/http"
	"io/ioutil"
	"strings"
	"github.com/labstack/echo"
	"encoding/json"
)

type NameWidth struct {
	Name string
	Width string
}


func cloudosList() []string {
	resBody, err := getResourceList_JsonByte("cloudos")
	if err != nil {
		cblog.Error(err)
	}
	var info struct {
		ResultList []string `json:"cloudos"`
	}
	json.Unmarshal(resBody, &info)

	return info.ResultList
}

//================ Frame
func frame(c echo.Context) error {
	cblog.Info("call frame()")

        htmlStr :=  `
<html>
  <head>
    <title>CB-Spider Admin Web Tool ....__^..^__....</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  </head>
    <frameset rows="85,*" frameborder="Yes" border=1">
        <frame src="adminweb/top" name="top_frame" scrolling="auto" noresize marginwidth="0" marginheight="0"/>
        <frameset frameborder="Yes" border=1">
            <frame src="adminweb/driver" name="main_frame" scrolling="auto" noresize marginwidth="5" marginheight="0"/> 
        </frameset>
    </frameset>
    <noframes>
    <body>
    
    
    </body>
    </noframes>
</html>
        `

	return c.HTML(http.StatusOK, htmlStr)
}

//================ Top
func top(c echo.Context) error {
	cblog.Info("call top()")

	htmlStr :=  ` 
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>

    <!-- <table border="0" bordercolordark="#FFFFFF" cellpadding="0" cellspacing="2" bgcolor="#FFFFFF" width="320" style="font-size:small;"> -->
    <table border="0" bordercolordark="#FFFFFF" cellpadding="0" cellspacing="1" bgcolor="#FFFFFF"  style="font-size:small;">      
        <tr bgcolor="#FFFFFF" align="center">
            <td rowspan="2" width="80" bgcolor="#FFFFFF">
                <!-- CB-Spider Logo -->
                <a href="../adminweb" target="_top">
                  <img height="45" width="42" src="https://cloud-barista.github.io/assets/img/frameworks/cb-spider.png" border='0' hspace='0' vspace='1' align="middle">
                </a>
		<font size=1>$$TIME$$</font>	
            </td>

            <td width="100">       
                <!-- Drivers Management --> 
                <a href="driver" target="main_frame">            
                    <font size=2>driver</font>
                </a>
            </td>
            <td width="100">       
                <!-- Credential Management -->
                <a href="credential" target="main_frame">            
                    <font size=2>credential</font>
                </a>
            </td>
            <td width="100">       
                <!-- Regions Management -->
                <a href="region" target="main_frame">            
                    <font size=2>region</font>
                </a>
            </td>
            <td width="100">       
                <!-- Connection Management -->
                <a href="connection" target="main_frame">            
                    <font size=2>connection</font>
                </a>
            </td>
            <td width="100">       
                <!-- This CB-Spider Info -->
                <a href="spiderinfo" target="main_frame">            
                    <font size=2>this spider</font>
                </a>
            </td>
            <td width="100">       
                <!-- CB-Spider Github -->
                <a href="https://github.com/cloud-barista/cb-spider" target="_blank">            
                    <font size=2>github</font>
                </a>
            </td> 
	</tr>

        <tr bgcolor="#FFFFFF" align="center">
            <td width="100">
                <!-- Image Management -->
                <a href="image" target="main_frame">
                    <font size=2>image(tbd)</font>
                </a>
            </td>
            <td width="100">
                <!-- Spec Management -->
                <a href="spec" target="_blank">
                    <font size=2>spec</font>
                </a>
            </td>
            <td width="100">
                <!-- VPC/Subnet Management -->
                <a href="vpc" target="_blank">
                    <font size=2>vpc/subnet</font>
                </a>
            </td>
            <td width="100">
                <!-- SecurityGroup Management -->
                <a href="security" target="_blank">
                    <font size=2>security group</font>
                </a>
            </td>
            <td width="100">
                <!-- KeyPair Management -->
                <a href="keypair" target="_blank">
                    <font size=2>keypair</font>
                </a>
            </td>
            <td width="100">
                <!-- VM Management -->
                <a href="vm">
                    <font size=2>vm</font>
                </a>
            </td>
        </tr>

    </table>
</body>
</html>
	`

	
	htmlStr = strings.ReplaceAll(htmlStr, "$$TIME$$", StartTime)
	return c.HTML(http.StatusOK, htmlStr)
}

func makeSelect_html(onchangeFunctionName string) string {
	strList := cloudosList()

	strSelect := `<select name="text_box" id="1" onchange="` + onchangeFunctionName + `(this)">`
	for _, one := range strList {
		if one == "AWS" {
			strSelect += `<option value="` + one + `" selected>` + one + `</option>`
		} else {
			strSelect += `<option value="` + one + `">` + one + `</option>`
		}
	}

	strSelect += `
		</select>
	`


	return strSelect
}

func getResourceList_JsonByte(resourceName string) ([]byte, error) {
        // ServicePort = ":1024"
	url := "http://localhost" + ServicePort + "/spider/" + resourceName

        // get object list
        res, err := http.Get(url)
        if err != nil {
                return nil, err
        }
        resBody, err := ioutil.ReadAll(res.Body)
        res.Body.Close()
        if err != nil {
                return nil, err
        }
	return resBody, err
}

// F5, X ("5", "driver", "deleteDriver()", "2")
func makeActionTR_html(colspan string, f5_href string,  delete_href string, fontSize string) string {
	if fontSize == "" { fontSize = "2" }

        strTR := fmt.Sprintf(`
		<tr bgcolor="#FFFFFF" align="right">
		    <td colspan="%s">
			<a href="%s">
			    <font size=%s><b>&nbsp;F5</b></font>
			</a>
			&nbsp;
			<a href="javascript:%s;">
			    <font size=%s><b>&nbsp;X</b></font>
			</a>
			&nbsp;
		    </td>
		</tr>
       		`, colspan, f5_href, fontSize, delete_href, fontSize) 

	return strTR
}

//         fieldName-width
// number, fieldName0-200, fieldName1-400, ... , checkbox
func makeTitleTRList_html(bgcolor string, fontSize string, nameWidthList []NameWidth) string {
	if bgcolor == "" { bgcolor = "#DDDDDD" }
	if fontSize == "" { fontSize = "2" }

	// (1) header number field
        strTR := fmt.Sprintf(`
		<tr bgcolor="%s" align="center">
		    <td width="15">
			    <font size=%s><b>&nbsp;#</b></font>
		    </td>
		`, bgcolor, fontSize)

	// (2) header title field
	for _, one := range nameWidthList {
		str := fmt.Sprintf(`
			    <td width="%s">
				    <font size=2>%s</font>
			    </td>
			`, one.Width, one.Name)
		strTR += str
	}
	
	// (3) header checkbox field
        strTR += `
		    <td width="15">
			    <input type="checkbox" onclick="toggle(this);" />
		    </td>
		</tr>
		`
	return strTR
}

// number, Provider Name, Driver File, Driver Name, checkbox
func makeDriverTRList_html(bgcolor string, height string, fontSize string, infoList []*dim.CloudDriverInfo) string {
	if bgcolor == "" { bgcolor = "#FFFFFF" }
	if height == "" { height = "30" }
	if fontSize == "" { fontSize = "2" }

        // make base TR frame for info list
        strTR := fmt.Sprintf(`
                <tr bgcolor="%s" align="center" height="%s">
                    <td>
                            <font size=%s>$$NUM$$</font>
                    </td>
                    <td>
                            <font size=%s>$$S1$$</font>
                    </td>
                    <td>
                            <font size=%s>$$S2$$</font>
                    </td>
                    <td>
                            <font size=%s>$$S3$$</font>
                    </td>
                    <td>
                        <input type="checkbox" name="check_box" value=$$S3$$>
                    </td>
                </tr>
       		`, bgcolor, height, fontSize, fontSize, fontSize, fontSize) 

        strData := ""
	// set data and make TR list
        for i, one := range infoList{
                str := strings.ReplaceAll(strTR, "$$NUM$$", strconv.Itoa(i+1))
                str = strings.ReplaceAll(str, "$$S1$$", one.ProviderName)
                str = strings.ReplaceAll(str, "$$S2$$", one.DriverLibFileName)
                str = strings.ReplaceAll(str, "$$S3$$", one.DriverName)
                strData += str
        }

	return strData
}

// make the string of javascript function
func makeOnchangeDriverProviderFunc_js() string {
        strFunc := `
              function onchangeProvider(source) {
                var providerName = source.value
                document.getElementById('2').value= providerName.toLowerCase() + "-driver-v1.0.so";
                document.getElementById('3').value= providerName.toLowerCase() + "-driver-01";
              }
        `

        return strFunc
}

// make the string of javascript function
func makeCheckBoxToggleFunc_js() string {

        strFunc := `
              function toggle(source) {
                var checkboxes = document.getElementsByName('check_box');
                for (var i = 0; i < checkboxes.length; i++) {
                  checkboxes[i].checked = source.checked;
                }
              }
        `

        return strFunc
}

// make the string of javascript function
func makePostDriverFunc_js() string {

// curl -X POST http://$RESTSERVER:1024/spider/driver -H 'Content-Type: application/json'  -d '{"DriverName":"aws-driver01","ProviderName":"AWS", "DriverLibFileName":"aws-driver-v1.0.so"}'

        strFunc := `
                function postDriver() {
                        var textboxes = document.getElementsByName('text_box');
			sendJson = '{ "ProviderName" : "$$PROVIDER$$", "DriverLibFileName" : "$$$DRVFILE$$", "DriverName" : "$$NAME$$" }'
                        for (var i = 0; i < textboxes.length; i++) { // @todo make parallel executions
                                switch (textboxes[i].id) {
                                        case "1":
                                                sendJson = sendJson.replace("$$PROVIDER$$", textboxes[i].value);
                                                break;
                                        case "2":
                                                sendJson = sendJson.replace("$$$DRVFILE$$", textboxes[i].value);
                                                break;
                                        case "3":
                                                sendJson = sendJson.replace("$$NAME$$", textboxes[i].value);
                                                break;
                                        default:
                                                break;
                                }
                        }
                        var xhr = new XMLHttpRequest();
                        xhr.open("POST", "$$SPIDER_SERVER$$/spider/driver", true);
                        xhr.setRequestHeader('Content-Type', 'application/json');
                        //xhr.send(JSON.stringify({ "DriverName": driverName, "ProviderName": providerName, "DriverLibFileName": driverLibFileName}));
			//xhr.send(JSON.stringify(sendJson));
			xhr.send(sendJson);

                        setTimeout(function(){
                                location.reload();
                        }, 400);

                }
        `
        strFunc = strings.ReplaceAll(strFunc, "$$SPIDER_SERVER$$", "http://" + HostIPorName + ServicePort) // ServicePort = ":1024"
        return strFunc
}

// make the string of javascript function
func makeDeleteDriverFunc_js() string {
// curl -X DELETE http://$RESTSERVER:1024/spider/driver/gcp-driver01 -H 'Content-Type: application/json'

        strFunc := `
                function deleteDriver() {
                        var checkboxes = document.getElementsByName('check_box');
                        for (var i = 0; i < checkboxes.length; i++) { // @todo make parallel executions
                                if (checkboxes[i].checked) {
                                        var xhr = new XMLHttpRequest();
                                        xhr.open("DELETE", "$$SPIDER_SERVER$$/spider/driver/" + checkboxes[i].value, true);
                                        xhr.setRequestHeader('Content-Type', 'application/json');
                                        xhr.send(null);
                                }
                        }
                        setTimeout(function(){
                                location.reload();
                        }, 400);

                }
        `
        strFunc = strings.ReplaceAll(strFunc, "$$SPIDER_SERVER$$", "http://" + HostIPorName + ServicePort) // ServicePort = ":1024"
        return strFunc
}

//================ Driver Info Management
// create driver page
func driver(c echo.Context) error {
	cblog.Info("call driver()")

	// make page header
	htmlStr :=  ` 
		<html>
		<head>
		    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		    <script type="text/javascript">
		`
	// (1) make Javascript Function
		htmlStr += makeOnchangeDriverProviderFunc_js()
		htmlStr += makeCheckBoxToggleFunc_js()
		htmlStr += makePostDriverFunc_js()
		htmlStr += makeDeleteDriverFunc_js()


	htmlStr += `
		    </script>
		</head>

		<body>
		    <table border="0" bordercolordark="#F8F8FF" cellpadding="0" cellspacing="1" bgcolor="#FFFFFF"  style="font-size:small;">      
		`

	// (2) make Table Action TR
		// colspan, f5_href, delete_href, fontSize
		htmlStr += makeActionTR_html("5", "driver", "deleteDriver()", "2")


	// (3) make Table Header TR
		
		nameWidthList := []NameWidth {
		    {"Provider Name", "200"},
		    {"Driver Library Name", "300"},
		    {"Driver Name", "200"},
		}	
		htmlStr +=  makeTitleTRList_html("#DDDDDD", "2", nameWidthList)


	// (4) make Table info list TR
        // (4-1) get driver info list @todo if empty list
		resBody, err := getResourceList_JsonByte("driver")
		if err != nil {
			cblog.Error(err)
			return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
		}
		var info struct {
			ResultList []*dim.CloudDriverInfo `json:"driver"`
		}
		json.Unmarshal(resBody, &info)

        // (4-2) make Table info list TR
		htmlStr += makeDriverTRList_html("", "", "", info.ResultList)


        // (5) make input field and add
        // attach text box for add
		htmlStr += `
			<tr bgcolor="#FFFFFF" align="center" height="30">
			    <td>
				    <font size=2>#</font>
			    </td>
			    <td>
				<!-- <input style="font-size:12px;text-align:center;" type="text" name="text_box" id="1" value="AWS"> -->
		`
		// Select format of CloudOS  name=text_box, id=1
		htmlStr += makeSelect_html("onchangeProvider")

		htmlStr += `
			    </td>
			    <td>
				<input style="font-size:12px;text-align:center;" type="text" name="text_box" id="2" value="aws-driver-v1.0.so">
			    </td>
			    <td>
				<input style="font-size:12px;text-align:center;" type="text" name="text_box" id="3" value="aws-driver01">
			    </td>
			    <td>
				<a href="javascript:postDriver()">
				    <font size=3><b>+</b></font>
				</a>
			    </td>
			</tr>
		`
	// make page tail
        htmlStr += `
                    </table>
                </body>
                </html>
        `

//fmt.Println(htmlStr)
	return c.HTML(http.StatusOK, htmlStr)
}

// make the string of javascript function
func makeOnchangeCredentialProviderFunc_js() string {
        strFunc := `
              function onchangeProvider(source) {
                var providerName = source.value
		// for credential info
		switch(providerName) {
		  case "AWS":
			credentialInfo = '[{"Key":"ClientId", "Value":"XXXXXX"}, {"Key":"ClientSecret", "Value":"XXXXXX"}]'
		    break;
		  case "AZURE":
			credentialInfo = '[{"Key":"ClientId", "Value":"XXXX-XXXX"}, {"Key":"ClientSecret", "Value":"xxxx-xxxx"}, {"Key":"TenantId", "Value":"xxxx-xxxx"}, {"Key":"SubscriptionId", "Value":"xxxx-xxxx"}]'
		    break;
		  case "GCP":
			credentialInfo = '[{"Key":"PrivateKey", "Value":"-----BEGIN PRIVATE KEY-----\nXXXX\n-----END PRIVATE KEY-----\n"},{"Key":"ProjectID", "Value":"powerkimhub"}, {"Key":"ClientEmail", "Value":"xxxx@xxxx.iam.gserviceaccount.com"}]'
		    break;
		  case "ALIBABA":
			credentialInfo = '[{"Key":"ClientId", "Value":"XXXXXX"}, {"Key":"ClientSecret", "Value":"XXXXXX"}]'
		    break;
		  case "CLOUDIT":
			credentialInfo = '[{"Key":"IdentityEndpoint", "Value":"http://xxx.xxx.co.kr:9090"}, {"Key":"AuthToken", "Value":"xxxx"}, {"Key":"Username", "Value":"xxxx"}, {"Key":"Password", "Value":"xxxx"}, {"Key":"TenantId", "Value":"tnt0009"}]'
		    break;
		  case "OPENSTACK":
			credentialInfo = '[{"Key":"IdentityEndpoint", "Value":"http://182.252.xxx.xxx:5000/v3"}, {"Key":"Username", "Value":"etri"}, {"Key":"Password", "Value":"xxxx"}, {"Key":"DomainName", "Value":"default"}, {"Key":"ProjectID", "Value":"xxxx"}]'
		    break;
		  case "DOCKER":
			credentialInfo = '[{"Key":"Host", "Value":"http://18.191.xxx.xxx:1004"}, {"Key":"APIVersion", "Value":"v1.38"}]'
		    break;
		  case "CLOUDTWIN":
			credentialInfo = '[{"Key":"ClientId", "Value":"XXXXXX"}, {"Key":"ClientSecret", "Value":"XXXXXX"}]'
		    break;
		  default:
			credentialInfo = '[{"Key":"ClientId", "Value":"XXXXXX"}, {"Key":"ClientSecret", "Value":"XXXXXX"}]'
		}
                document.getElementById('2').value= credentialInfo

		// for credential name
                document.getElementById('3').value= providerName.toLowerCase() + "-credential-01";
              }
        `

        return strFunc
}

// number, Provider Name, Credential Info, Credential Name, checkbox
func makeCredentialTRList_html(bgcolor string, height string, fontSize string, infoList []*cim.CredentialInfo) string {
        if bgcolor == "" { bgcolor = "#FFFFFF" }
        if height == "" { height = "30" }
        if fontSize == "" { fontSize = "2" }

        // make base TR frame for info list
        strTR := fmt.Sprintf(`
                <tr bgcolor="%s" align="center" height="%s">
                    <td>
                            <font size=%s>$$NUM$$</font>
                    </td>
                    <td>
                            <font size=%s>$$S1$$</font>
                    </td>
                    <td>
                            <font size=%s>$$S2$$</font>
                    </td>
                    <td>
                            <font size=%s>$$S3$$</font>
                    </td>
                    <td>
                        <input type="checkbox" name="check_box" value=$$S3$$>
                    </td>
                </tr>
                `, bgcolor, height, fontSize, fontSize, fontSize, fontSize)

        strData := ""
        // set data and make TR list
        for i, one := range infoList{
                str := strings.ReplaceAll(strTR, "$$NUM$$", strconv.Itoa(i+1))
                str = strings.ReplaceAll(str, "$$S1$$", one.ProviderName)
		strKeyList := ""
                for _, kv := range one.KeyValueInfoList {
                        strKeyList += kv.Key + ":xxxx, "
                }
                str = strings.ReplaceAll(str, "$$S2$$", strKeyList)
                str = strings.ReplaceAll(str, "$$S3$$", one.CredentialName)
                strData += str
        }

        return strData
}

// make the string of javascript function
func makePostCredentialFunc_js() string {

// curl -X POST http://$RESTSERVER:1024/spider/credential -H 'Content-Type: application/json' '{"CredentialName":"aws-credential01","ProviderName":"AWS", "KeyValueInfoList": [{"Key":"ClientId", "Value":"XXXXXX"}, {"Key":"ClientSecret", "Value":"XXXXXX"}]}'

        strFunc := `
                function postCredential() {
                        var textboxes = document.getElementsByName('text_box');
			sendJson = '{ "ProviderName" : "$$PROVIDER$$", "KeyValueInfoList" : $$CREDENTIALINFO$$, "CredentialName" : "$$NAME$$" }'

                        for (var i = 0; i < textboxes.length; i++) { // @todo make parallel executions
                                switch (textboxes[i].id) {
                                        case "1":
                                                sendJson = sendJson.replace("$$PROVIDER$$", textboxes[i].value);
                                                break;
                                        case "2":
                                                sendJson = sendJson.replace("$$CREDENTIALINFO$$", textboxes[i].value);
                                                break;
                                        case "3":
                                                sendJson = sendJson.replace("$$NAME$$", textboxes[i].value);
                                                break;
                                        default:
                                                break;
                                }
                        }
                        var xhr = new XMLHttpRequest();
                        xhr.open("POST", "$$SPIDER_SERVER$$/spider/credential", true);
                        xhr.setRequestHeader('Content-Type', 'application/json');
                        //xhr.send(JSON.stringify({ "CredentialName": credentialName, "ProviderName": providerName, "KeyValueInfoList": credentialInfo}));
                        //xhr.send(JSON.stringify(sendJson));
                        xhr.send(sendJson);

                        setTimeout(function(){
                                location.reload();
                        }, 400);

                }
        `
        strFunc = strings.ReplaceAll(strFunc, "$$SPIDER_SERVER$$", "http://" + HostIPorName + ServicePort) // ServicePort = ":1024"
        return strFunc
}

// make the string of javascript function
func makeDeleteCredentialFunc_js() string {
// curl -X DELETE http://$RESTSERVER:1024/spider/credential/aws-credential01 -H 'Content-Type: application/json'

        strFunc := `
                function deleteCredential() {
                        var checkboxes = document.getElementsByName('check_box');
                        for (var i = 0; i < checkboxes.length; i++) { // @todo make parallel executions
                                if (checkboxes[i].checked) {
                                        var xhr = new XMLHttpRequest();
                                        xhr.open("DELETE", "$$SPIDER_SERVER$$/spider/credential/" + checkboxes[i].value, true);
                                        xhr.setRequestHeader('Content-Type', 'application/json');
                                        xhr.send(null);
                                }
                        }
                        setTimeout(function(){
                                location.reload();
                        }, 400);

                }
        `
        strFunc = strings.ReplaceAll(strFunc, "$$SPIDER_SERVER$$", "http://" + HostIPorName + ServicePort) // ServicePort = ":1024"
        return strFunc
}


//================ Crential Info Management
// create credential page
func credential(c echo.Context) error {
        cblog.Info("call credential()")

        // make page header
        htmlStr :=  `
                <html>
                <head>
                    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
                    <script type="text/javascript">
                `
        // (1) make Javascript Function
		htmlStr += makeOnchangeCredentialProviderFunc_js()
                htmlStr += makeCheckBoxToggleFunc_js()
                htmlStr += makePostCredentialFunc_js()
                htmlStr += makeDeleteCredentialFunc_js()


        htmlStr += `
                    </script>
                </head>

                <body>
                    <table border="0" bordercolordark="#F8F8FF" cellpadding="0" cellspacing="1" bgcolor="#FFFFFF"  style="font-size:small;">
                `

        // (2) make Table Action TR
                // colspan, f5_href, delete_href, fontSize
                htmlStr += makeActionTR_html("5", "credential", "deleteCredential()", "2")


        // (3) make Table Header TR
                nameWidthList := []NameWidth {
                    {"Provider Name", "200"},
                    {"Credential Info", "300"},
                    {"Credential Name", "200"},
                }
                htmlStr +=  makeTitleTRList_html("#DDDDDD", "2", nameWidthList)


        // (4) make Table info list TR
        // (4-1) get driver info list @todo if empty list
                resBody, err := getResourceList_JsonByte("credential")
                if err != nil {
                        cblog.Error(err)
                        return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
                }
                var info struct {
                        ResultList []*cim.CredentialInfo `json:"credential"`
                }
                json.Unmarshal(resBody, &info)

        // (4-2) make Table info list TR
                htmlStr += makeCredentialTRList_html("", "", "", info.ResultList)


        // (5) make input field and add
        // attach text box for add
                htmlStr += `
                        <tr bgcolor="#FFFFFF" align="center" height="30">
                            <td>
                                    <font size=2>#</font>
                            </td>
                            <td>
				<!-- <input style="font-size:12px;text-align:center;" type="text" name="text_box" id="1" value="AWS"> -->
		`
                // Select format of CloudOS  name=text_box, id=1
                htmlStr += makeSelect_html("onchangeProvider")
			
		htmlStr += `	
                            </td>
                            <td>
                                <textarea style="font-size:12px;text-align:center;" name="text_box" id="2" cols=50>[{"Key":"ClientId", "Value":"XXXXXX"}, {"Key":"ClientSecret", "Value":"XXXXXX"}]</textarea>
                            </td>
                            <td>
                                <input style="font-size:12px;text-align:center;" type="text" name="text_box" id="3" value="aws-credential01">
                            </td>
                            <td>
                                <a href="javascript:postCredential()">
                                    <font size=3><b>+</b></font>
                                </a>
                            </td>
                        </tr>
                `
        // make page tail
        htmlStr += `
                    </table>
                </body>
                </html>
        `

fmt.Println(htmlStr)
        return c.HTML(http.StatusOK, htmlStr)
}


//================ This Spider Info
func spiderInfo(c echo.Context) error {
        cblog.Info("call spiderInfo()")


        htmlStr :=  `
                <html>
                <head>
                    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
                </head>

                <body>

                    <table border="0" bordercolordark="#F8F8FF" cellpadding="0" cellspacing="1" bgcolor="#FFFFFF"  style="font-size:small;">
                                <tr bgcolor="#DDDDDD" align="center">
                                    <td width="200">
                                            <font size=2>Start Time</font>
                                    </td>
                                    <td width="220">
                                            <font size=2>Server Version</font>
                                    </td>
                                    <td width="220">
                                            <font size=2>API Version</font>
                                    </td>
                                </tr>
                                <tr bgcolor="#FFFFFF" align="center" height="30">
                                    <td width="220">
                                            <font size=2>$$STARTTIME$$</font>
                                    </td>
                                    <td width="220">
                                            <font size=2>CB-Spider Version(TBD)</font>
                                    </td>
                                    <td width="220">
                                            <font size=2>API Version</font>
                                    </td>
                                </tr>

                    </table>
		<br>
		<br>
		<br>
                    <table border="0" bordercolordark="#F8F8FF" cellpadding="0" cellspacing="1" bgcolor="#FFFFFF"  style="font-size:small;">
                                <tr bgcolor="#DDDDDD" align="center">
                                    <td width="240">
                                            <font size=2>API EndPoint</font>
                                    </td>
                                    <td width="420">
                                            <font size=2>API Docs</font>
                                    </td>
                                </tr>
                                <tr bgcolor="#FFFFFF" align="center" height="30">
                                    <td width="240">
                                            <font size=2>$$APIENDPOINT$$</font>
                                    </td>
                                    <td width="420">
                                            <font size=2><a href='https://cloud-barista.github.io/rest-api/v0.2.0/spider/ccim/' target='_blank'>https://cloud-barista.github.io/rest-api/v0.2.0/spider/ccim/ </a></font>
                                            <font size=2><a href='https://cloud-barista.github.io/rest-api/v0.2.0/spider/cctm/' target='_blank'>https://cloud-barista.github.io/rest-api/v0.2.0/spider/cctm/ </a></font>
                                    </td>
                                </tr>

                    </table>
                </body>
                </html>
                `

        htmlStr = strings.ReplaceAll(htmlStr, "$$STARTTIME$$", StartTime)
        htmlStr = strings.ReplaceAll(htmlStr, "$$APIENDPOINT$$", "http://" + HostIPorName + ServicePort + "/spider") // ServicePort = ":1024"

        return c.HTML(http.StatusOK, htmlStr)
}

